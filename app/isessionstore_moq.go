// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package app

import (
	"sync"
)

var (
	lockISessionStoreMockFindOne sync.RWMutex
	lockISessionStoreMockSave    sync.RWMutex
)

// ISessionStoreMock is a mock implementation of ISessionStore.
//
//     func TestSomethingThatUsesISessionStore(t *testing.T) {
//
//         // make and configure a mocked ISessionStore
//         mockedISessionStore := &ISessionStoreMock{
//             FindOneFunc: func(q *SessionQuery) (*Session, error) {
// 	               panic("mock out the FindOne method")
//             },
//             SaveFunc: func(record *Session) (bool, error) {
// 	               panic("mock out the Save method")
//             },
//         }
//
//         // use mockedISessionStore in code that requires ISessionStore
//         // and then make assertions.
//
//     }
type ISessionStoreMock struct {
	// FindOneFunc mocks the FindOne method.
	FindOneFunc func(q *SessionQuery) (*Session, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(record *Session) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// FindOne holds details about calls to the FindOne method.
		FindOne []struct {
			// Q is the q argument value.
			Q *SessionQuery
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Record is the record argument value.
			Record *Session
		}
	}
}

// FindOne calls FindOneFunc.
func (mock *ISessionStoreMock) FindOne(q *SessionQuery) (*Session, error) {
	if mock.FindOneFunc == nil {
		panic("ISessionStoreMock.FindOneFunc: method is nil but ISessionStore.FindOne was just called")
	}
	callInfo := struct {
		Q *SessionQuery
	}{
		Q: q,
	}
	lockISessionStoreMockFindOne.Lock()
	mock.calls.FindOne = append(mock.calls.FindOne, callInfo)
	lockISessionStoreMockFindOne.Unlock()
	return mock.FindOneFunc(q)
}

// FindOneCalls gets all the calls that were made to FindOne.
// Check the length with:
//     len(mockedISessionStore.FindOneCalls())
func (mock *ISessionStoreMock) FindOneCalls() []struct {
	Q *SessionQuery
} {
	var calls []struct {
		Q *SessionQuery
	}
	lockISessionStoreMockFindOne.RLock()
	calls = mock.calls.FindOne
	lockISessionStoreMockFindOne.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *ISessionStoreMock) Save(record *Session) (bool, error) {
	if mock.SaveFunc == nil {
		panic("ISessionStoreMock.SaveFunc: method is nil but ISessionStore.Save was just called")
	}
	callInfo := struct {
		Record *Session
	}{
		Record: record,
	}
	lockISessionStoreMockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	lockISessionStoreMockSave.Unlock()
	return mock.SaveFunc(record)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedISessionStore.SaveCalls())
func (mock *ISessionStoreMock) SaveCalls() []struct {
	Record *Session
} {
	var calls []struct {
		Record *Session
	}
	lockISessionStoreMockSave.RLock()
	calls = mock.calls.Save
	lockISessionStoreMockSave.RUnlock()
	return calls
}
