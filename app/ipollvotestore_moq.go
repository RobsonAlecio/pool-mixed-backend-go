// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package app

import (
	"sync"
)

var (
	lockIPollVoteStoreMockCount sync.RWMutex
	lockIPollVoteStoreMockSave  sync.RWMutex
)

// IPollVoteStoreMock is a mock implementation of IPollVoteStore.
//
//     func TestSomethingThatUsesIPollVoteStore(t *testing.T) {
//
//         // make and configure a mocked IPollVoteStore
//         mockedIPollVoteStore := &IPollVoteStoreMock{
//             CountFunc: func(q *PollVoteQuery) (int64, error) {
// 	               panic("mock out the Count method")
//             },
//             SaveFunc: func(record *PollVote) (bool, error) {
// 	               panic("mock out the Save method")
//             },
//         }
//
//         // use mockedIPollVoteStore in code that requires IPollVoteStore
//         // and then make assertions.
//
//     }
type IPollVoteStoreMock struct {
	// CountFunc mocks the Count method.
	CountFunc func(q *PollVoteQuery) (int64, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(record *PollVote) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// Count holds details about calls to the Count method.
		Count []struct {
			// Q is the q argument value.
			Q *PollVoteQuery
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Record is the record argument value.
			Record *PollVote
		}
	}
}

// Count calls CountFunc.
func (mock *IPollVoteStoreMock) Count(q *PollVoteQuery) (int64, error) {
	if mock.CountFunc == nil {
		panic("IPollVoteStoreMock.CountFunc: method is nil but IPollVoteStore.Count was just called")
	}
	callInfo := struct {
		Q *PollVoteQuery
	}{
		Q: q,
	}
	lockIPollVoteStoreMockCount.Lock()
	mock.calls.Count = append(mock.calls.Count, callInfo)
	lockIPollVoteStoreMockCount.Unlock()
	return mock.CountFunc(q)
}

// CountCalls gets all the calls that were made to Count.
// Check the length with:
//     len(mockedIPollVoteStore.CountCalls())
func (mock *IPollVoteStoreMock) CountCalls() []struct {
	Q *PollVoteQuery
} {
	var calls []struct {
		Q *PollVoteQuery
	}
	lockIPollVoteStoreMockCount.RLock()
	calls = mock.calls.Count
	lockIPollVoteStoreMockCount.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *IPollVoteStoreMock) Save(record *PollVote) (bool, error) {
	if mock.SaveFunc == nil {
		panic("IPollVoteStoreMock.SaveFunc: method is nil but IPollVoteStore.Save was just called")
	}
	callInfo := struct {
		Record *PollVote
	}{
		Record: record,
	}
	lockIPollVoteStoreMockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	lockIPollVoteStoreMockSave.Unlock()
	return mock.SaveFunc(record)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedIPollVoteStore.SaveCalls())
func (mock *IPollVoteStoreMock) SaveCalls() []struct {
	Record *PollVote
} {
	var calls []struct {
		Record *PollVote
	}
	lockIPollVoteStoreMockSave.RLock()
	calls = mock.calls.Save
	lockIPollVoteStoreMockSave.RUnlock()
	return calls
}
