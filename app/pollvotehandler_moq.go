// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package app

import (
	"gopkg.in/src-d/go-kallax.v1"
	"sync"
)

var (
	lockPollVoteHandlerMockPollAlreadyVotedByUser sync.RWMutex
	lockPollVoteHandlerMockSaveVote               sync.RWMutex
	lockPollVoteHandlerMockVotesFor               sync.RWMutex
)

// PollVoteHandlerMock is a mock implementation of PollVoteHandler.
//
//     func TestSomethingThatUsesPollVoteHandler(t *testing.T) {
//
//         // make and configure a mocked PollVoteHandler
//         mockedPollVoteHandler := &PollVoteHandlerMock{
//             PollAlreadyVotedByUserFunc: func(pollID kallax.ULID, userID kallax.ULID) (bool, error) {
// 	               panic("mock out the PollAlreadyVotedByUser method")
//             },
//             SaveVoteFunc: func(vote PollVote) PollVote {
// 	               panic("mock out the SaveVote method")
//             },
//             VotesForFunc: func(pollID kallax.ULID, option string) int64 {
// 	               panic("mock out the VotesFor method")
//             },
//         }
//
//         // use mockedPollVoteHandler in code that requires PollVoteHandler
//         // and then make assertions.
//
//     }
type PollVoteHandlerMock struct {
	// PollAlreadyVotedByUserFunc mocks the PollAlreadyVotedByUser method.
	PollAlreadyVotedByUserFunc func(pollID kallax.ULID, userID kallax.ULID) (bool, error)

	// SaveVoteFunc mocks the SaveVote method.
	SaveVoteFunc func(vote PollVote) PollVote

	// VotesForFunc mocks the VotesFor method.
	VotesForFunc func(pollID kallax.ULID, option string) int64

	// calls tracks calls to the methods.
	calls struct {
		// PollAlreadyVotedByUser holds details about calls to the PollAlreadyVotedByUser method.
		PollAlreadyVotedByUser []struct {
			// PollID is the pollID argument value.
			PollID kallax.ULID
			// UserID is the userID argument value.
			UserID kallax.ULID
		}
		// SaveVote holds details about calls to the SaveVote method.
		SaveVote []struct {
			// Vote is the vote argument value.
			Vote PollVote
		}
		// VotesFor holds details about calls to the VotesFor method.
		VotesFor []struct {
			// PollID is the pollID argument value.
			PollID kallax.ULID
			// Option is the option argument value.
			Option string
		}
	}
}

// PollAlreadyVotedByUser calls PollAlreadyVotedByUserFunc.
func (mock *PollVoteHandlerMock) PollAlreadyVotedByUser(pollID kallax.ULID, userID kallax.ULID) (bool, error) {
	if mock.PollAlreadyVotedByUserFunc == nil {
		panic("PollVoteHandlerMock.PollAlreadyVotedByUserFunc: method is nil but PollVoteHandler.PollAlreadyVotedByUser was just called")
	}
	callInfo := struct {
		PollID kallax.ULID
		UserID kallax.ULID
	}{
		PollID: pollID,
		UserID: userID,
	}
	lockPollVoteHandlerMockPollAlreadyVotedByUser.Lock()
	mock.calls.PollAlreadyVotedByUser = append(mock.calls.PollAlreadyVotedByUser, callInfo)
	lockPollVoteHandlerMockPollAlreadyVotedByUser.Unlock()
	return mock.PollAlreadyVotedByUserFunc(pollID, userID)
}

// PollAlreadyVotedByUserCalls gets all the calls that were made to PollAlreadyVotedByUser.
// Check the length with:
//     len(mockedPollVoteHandler.PollAlreadyVotedByUserCalls())
func (mock *PollVoteHandlerMock) PollAlreadyVotedByUserCalls() []struct {
	PollID kallax.ULID
	UserID kallax.ULID
} {
	var calls []struct {
		PollID kallax.ULID
		UserID kallax.ULID
	}
	lockPollVoteHandlerMockPollAlreadyVotedByUser.RLock()
	calls = mock.calls.PollAlreadyVotedByUser
	lockPollVoteHandlerMockPollAlreadyVotedByUser.RUnlock()
	return calls
}

// SaveVote calls SaveVoteFunc.
func (mock *PollVoteHandlerMock) SaveVote(vote PollVote) PollVote {
	if mock.SaveVoteFunc == nil {
		panic("PollVoteHandlerMock.SaveVoteFunc: method is nil but PollVoteHandler.SaveVote was just called")
	}
	callInfo := struct {
		Vote PollVote
	}{
		Vote: vote,
	}
	lockPollVoteHandlerMockSaveVote.Lock()
	mock.calls.SaveVote = append(mock.calls.SaveVote, callInfo)
	lockPollVoteHandlerMockSaveVote.Unlock()
	return mock.SaveVoteFunc(vote)
}

// SaveVoteCalls gets all the calls that were made to SaveVote.
// Check the length with:
//     len(mockedPollVoteHandler.SaveVoteCalls())
func (mock *PollVoteHandlerMock) SaveVoteCalls() []struct {
	Vote PollVote
} {
	var calls []struct {
		Vote PollVote
	}
	lockPollVoteHandlerMockSaveVote.RLock()
	calls = mock.calls.SaveVote
	lockPollVoteHandlerMockSaveVote.RUnlock()
	return calls
}

// VotesFor calls VotesForFunc.
func (mock *PollVoteHandlerMock) VotesFor(pollID kallax.ULID, option string) int64 {
	if mock.VotesForFunc == nil {
		panic("PollVoteHandlerMock.VotesForFunc: method is nil but PollVoteHandler.VotesFor was just called")
	}
	callInfo := struct {
		PollID kallax.ULID
		Option string
	}{
		PollID: pollID,
		Option: option,
	}
	lockPollVoteHandlerMockVotesFor.Lock()
	mock.calls.VotesFor = append(mock.calls.VotesFor, callInfo)
	lockPollVoteHandlerMockVotesFor.Unlock()
	return mock.VotesForFunc(pollID, option)
}

// VotesForCalls gets all the calls that were made to VotesFor.
// Check the length with:
//     len(mockedPollVoteHandler.VotesForCalls())
func (mock *PollVoteHandlerMock) VotesForCalls() []struct {
	PollID kallax.ULID
	Option string
} {
	var calls []struct {
		PollID kallax.ULID
		Option string
	}
	lockPollVoteHandlerMockVotesFor.RLock()
	calls = mock.calls.VotesFor
	lockPollVoteHandlerMockVotesFor.RUnlock()
	return calls
}
