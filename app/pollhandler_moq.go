// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package app

import (
	"gopkg.in/src-d/go-kallax.v1"
	"sync"
)

var (
	lockPollHandlerMockFindPollByID sync.RWMutex
	lockPollHandlerMockSavePoll     sync.RWMutex
)

// PollHandlerMock is a mock implementation of PollHandler.
//
//     func TestSomethingThatUsesPollHandler(t *testing.T) {
//
//         // make and configure a mocked PollHandler
//         mockedPollHandler := &PollHandlerMock{
//             FindPollByIDFunc: func(ID kallax.ULID) (*Poll, error) {
// 	               panic("mock out the FindPollByID method")
//             },
//             SavePollFunc: func(poll Poll) Poll {
// 	               panic("mock out the SavePoll method")
//             },
//         }
//
//         // use mockedPollHandler in code that requires PollHandler
//         // and then make assertions.
//
//     }
type PollHandlerMock struct {
	// FindPollByIDFunc mocks the FindPollByID method.
	FindPollByIDFunc func(ID kallax.ULID) (*Poll, error)

	// SavePollFunc mocks the SavePoll method.
	SavePollFunc func(poll Poll) Poll

	// calls tracks calls to the methods.
	calls struct {
		// FindPollByID holds details about calls to the FindPollByID method.
		FindPollByID []struct {
			// ID is the ID argument value.
			ID kallax.ULID
		}
		// SavePoll holds details about calls to the SavePoll method.
		SavePoll []struct {
			// Poll is the poll argument value.
			Poll Poll
		}
	}
}

// FindPollByID calls FindPollByIDFunc.
func (mock *PollHandlerMock) FindPollByID(ID kallax.ULID) (*Poll, error) {
	if mock.FindPollByIDFunc == nil {
		panic("PollHandlerMock.FindPollByIDFunc: method is nil but PollHandler.FindPollByID was just called")
	}
	callInfo := struct {
		ID kallax.ULID
	}{
		ID: ID,
	}
	lockPollHandlerMockFindPollByID.Lock()
	mock.calls.FindPollByID = append(mock.calls.FindPollByID, callInfo)
	lockPollHandlerMockFindPollByID.Unlock()
	return mock.FindPollByIDFunc(ID)
}

// FindPollByIDCalls gets all the calls that were made to FindPollByID.
// Check the length with:
//     len(mockedPollHandler.FindPollByIDCalls())
func (mock *PollHandlerMock) FindPollByIDCalls() []struct {
	ID kallax.ULID
} {
	var calls []struct {
		ID kallax.ULID
	}
	lockPollHandlerMockFindPollByID.RLock()
	calls = mock.calls.FindPollByID
	lockPollHandlerMockFindPollByID.RUnlock()
	return calls
}

// SavePoll calls SavePollFunc.
func (mock *PollHandlerMock) SavePoll(poll Poll) Poll {
	if mock.SavePollFunc == nil {
		panic("PollHandlerMock.SavePollFunc: method is nil but PollHandler.SavePoll was just called")
	}
	callInfo := struct {
		Poll Poll
	}{
		Poll: poll,
	}
	lockPollHandlerMockSavePoll.Lock()
	mock.calls.SavePoll = append(mock.calls.SavePoll, callInfo)
	lockPollHandlerMockSavePoll.Unlock()
	return mock.SavePollFunc(poll)
}

// SavePollCalls gets all the calls that were made to SavePoll.
// Check the length with:
//     len(mockedPollHandler.SavePollCalls())
func (mock *PollHandlerMock) SavePollCalls() []struct {
	Poll Poll
} {
	var calls []struct {
		Poll Poll
	}
	lockPollHandlerMockSavePoll.RLock()
	calls = mock.calls.SavePoll
	lockPollHandlerMockSavePoll.RUnlock()
	return calls
}
