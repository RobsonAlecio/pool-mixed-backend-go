// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package app

import (
	"gopkg.in/src-d/go-kallax.v1"
	"sync"
)

var (
	lockPollOptionHandlerMockDeletePollOption sync.RWMutex
	lockPollOptionHandlerMockExistsOption     sync.RWMutex
	lockPollOptionHandlerMockFindPollOptions  sync.RWMutex
	lockPollOptionHandlerMockSavePollOption   sync.RWMutex
)

// PollOptionHandlerMock is a mock implementation of PollOptionHandler.
//
//     func TestSomethingThatUsesPollOptionHandler(t *testing.T) {
//
//         // make and configure a mocked PollOptionHandler
//         mockedPollOptionHandler := &PollOptionHandlerMock{
//             DeletePollOptionFunc: func(id kallax.ULID) error {
// 	               panic("mock out the DeletePollOption method")
//             },
//             ExistsOptionFunc: func(pollID kallax.ULID, candidate string) (bool, error) {
// 	               panic("mock out the ExistsOption method")
//             },
//             FindPollOptionsFunc: func(id kallax.ULID) ([]*PollOption, error) {
// 	               panic("mock out the FindPollOptions method")
//             },
//             SavePollOptionFunc: func(poll PollOption) PollOption {
// 	               panic("mock out the SavePollOption method")
//             },
//         }
//
//         // use mockedPollOptionHandler in code that requires PollOptionHandler
//         // and then make assertions.
//
//     }
type PollOptionHandlerMock struct {
	// DeletePollOptionFunc mocks the DeletePollOption method.
	DeletePollOptionFunc func(id kallax.ULID) error

	// ExistsOptionFunc mocks the ExistsOption method.
	ExistsOptionFunc func(pollID kallax.ULID, candidate string) (bool, error)

	// FindPollOptionsFunc mocks the FindPollOptions method.
	FindPollOptionsFunc func(id kallax.ULID) ([]*PollOption, error)

	// SavePollOptionFunc mocks the SavePollOption method.
	SavePollOptionFunc func(poll PollOption) PollOption

	// calls tracks calls to the methods.
	calls struct {
		// DeletePollOption holds details about calls to the DeletePollOption method.
		DeletePollOption []struct {
			// ID is the id argument value.
			ID kallax.ULID
		}
		// ExistsOption holds details about calls to the ExistsOption method.
		ExistsOption []struct {
			// PollID is the pollID argument value.
			PollID kallax.ULID
			// Candidate is the candidate argument value.
			Candidate string
		}
		// FindPollOptions holds details about calls to the FindPollOptions method.
		FindPollOptions []struct {
			// ID is the id argument value.
			ID kallax.ULID
		}
		// SavePollOption holds details about calls to the SavePollOption method.
		SavePollOption []struct {
			// Poll is the poll argument value.
			Poll PollOption
		}
	}
}

// DeletePollOption calls DeletePollOptionFunc.
func (mock *PollOptionHandlerMock) DeletePollOption(id kallax.ULID) error {
	if mock.DeletePollOptionFunc == nil {
		panic("PollOptionHandlerMock.DeletePollOptionFunc: method is nil but PollOptionHandler.DeletePollOption was just called")
	}
	callInfo := struct {
		ID kallax.ULID
	}{
		ID: id,
	}
	lockPollOptionHandlerMockDeletePollOption.Lock()
	mock.calls.DeletePollOption = append(mock.calls.DeletePollOption, callInfo)
	lockPollOptionHandlerMockDeletePollOption.Unlock()
	return mock.DeletePollOptionFunc(id)
}

// DeletePollOptionCalls gets all the calls that were made to DeletePollOption.
// Check the length with:
//     len(mockedPollOptionHandler.DeletePollOptionCalls())
func (mock *PollOptionHandlerMock) DeletePollOptionCalls() []struct {
	ID kallax.ULID
} {
	var calls []struct {
		ID kallax.ULID
	}
	lockPollOptionHandlerMockDeletePollOption.RLock()
	calls = mock.calls.DeletePollOption
	lockPollOptionHandlerMockDeletePollOption.RUnlock()
	return calls
}

// ExistsOption calls ExistsOptionFunc.
func (mock *PollOptionHandlerMock) ExistsOption(pollID kallax.ULID, candidate string) (bool, error) {
	if mock.ExistsOptionFunc == nil {
		panic("PollOptionHandlerMock.ExistsOptionFunc: method is nil but PollOptionHandler.ExistsOption was just called")
	}
	callInfo := struct {
		PollID    kallax.ULID
		Candidate string
	}{
		PollID:    pollID,
		Candidate: candidate,
	}
	lockPollOptionHandlerMockExistsOption.Lock()
	mock.calls.ExistsOption = append(mock.calls.ExistsOption, callInfo)
	lockPollOptionHandlerMockExistsOption.Unlock()
	return mock.ExistsOptionFunc(pollID, candidate)
}

// ExistsOptionCalls gets all the calls that were made to ExistsOption.
// Check the length with:
//     len(mockedPollOptionHandler.ExistsOptionCalls())
func (mock *PollOptionHandlerMock) ExistsOptionCalls() []struct {
	PollID    kallax.ULID
	Candidate string
} {
	var calls []struct {
		PollID    kallax.ULID
		Candidate string
	}
	lockPollOptionHandlerMockExistsOption.RLock()
	calls = mock.calls.ExistsOption
	lockPollOptionHandlerMockExistsOption.RUnlock()
	return calls
}

// FindPollOptions calls FindPollOptionsFunc.
func (mock *PollOptionHandlerMock) FindPollOptions(id kallax.ULID) ([]*PollOption, error) {
	if mock.FindPollOptionsFunc == nil {
		panic("PollOptionHandlerMock.FindPollOptionsFunc: method is nil but PollOptionHandler.FindPollOptions was just called")
	}
	callInfo := struct {
		ID kallax.ULID
	}{
		ID: id,
	}
	lockPollOptionHandlerMockFindPollOptions.Lock()
	mock.calls.FindPollOptions = append(mock.calls.FindPollOptions, callInfo)
	lockPollOptionHandlerMockFindPollOptions.Unlock()
	return mock.FindPollOptionsFunc(id)
}

// FindPollOptionsCalls gets all the calls that were made to FindPollOptions.
// Check the length with:
//     len(mockedPollOptionHandler.FindPollOptionsCalls())
func (mock *PollOptionHandlerMock) FindPollOptionsCalls() []struct {
	ID kallax.ULID
} {
	var calls []struct {
		ID kallax.ULID
	}
	lockPollOptionHandlerMockFindPollOptions.RLock()
	calls = mock.calls.FindPollOptions
	lockPollOptionHandlerMockFindPollOptions.RUnlock()
	return calls
}

// SavePollOption calls SavePollOptionFunc.
func (mock *PollOptionHandlerMock) SavePollOption(poll PollOption) PollOption {
	if mock.SavePollOptionFunc == nil {
		panic("PollOptionHandlerMock.SavePollOptionFunc: method is nil but PollOptionHandler.SavePollOption was just called")
	}
	callInfo := struct {
		Poll PollOption
	}{
		Poll: poll,
	}
	lockPollOptionHandlerMockSavePollOption.Lock()
	mock.calls.SavePollOption = append(mock.calls.SavePollOption, callInfo)
	lockPollOptionHandlerMockSavePollOption.Unlock()
	return mock.SavePollOptionFunc(poll)
}

// SavePollOptionCalls gets all the calls that were made to SavePollOption.
// Check the length with:
//     len(mockedPollOptionHandler.SavePollOptionCalls())
func (mock *PollOptionHandlerMock) SavePollOptionCalls() []struct {
	Poll PollOption
} {
	var calls []struct {
		Poll PollOption
	}
	lockPollOptionHandlerMockSavePollOption.RLock()
	calls = mock.calls.SavePollOption
	lockPollOptionHandlerMockSavePollOption.RUnlock()
	return calls
}
