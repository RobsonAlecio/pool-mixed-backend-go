// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package app

import (
	"sync"
)

var (
	lockIPollOptionStoreMockCount   sync.RWMutex
	lockIPollOptionStoreMockDelete  sync.RWMutex
	lockIPollOptionStoreMockFindAll sync.RWMutex
	lockIPollOptionStoreMockFindOne sync.RWMutex
	lockIPollOptionStoreMockSave    sync.RWMutex
)

// IPollOptionStoreMock is a mock implementation of IPollOptionStore.
//
//     func TestSomethingThatUsesIPollOptionStore(t *testing.T) {
//
//         // make and configure a mocked IPollOptionStore
//         mockedIPollOptionStore := &IPollOptionStoreMock{
//             CountFunc: func(q *PollOptionQuery) (int64, error) {
// 	               panic("mock out the Count method")
//             },
//             DeleteFunc: func(record *PollOption) error {
// 	               panic("mock out the Delete method")
//             },
//             FindAllFunc: func(q *PollOptionQuery) ([]*PollOption, error) {
// 	               panic("mock out the FindAll method")
//             },
//             FindOneFunc: func(q *PollOptionQuery) (*PollOption, error) {
// 	               panic("mock out the FindOne method")
//             },
//             SaveFunc: func(record *PollOption) (bool, error) {
// 	               panic("mock out the Save method")
//             },
//         }
//
//         // use mockedIPollOptionStore in code that requires IPollOptionStore
//         // and then make assertions.
//
//     }
type IPollOptionStoreMock struct {
	// CountFunc mocks the Count method.
	CountFunc func(q *PollOptionQuery) (int64, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(record *PollOption) error

	// FindAllFunc mocks the FindAll method.
	FindAllFunc func(q *PollOptionQuery) ([]*PollOption, error)

	// FindOneFunc mocks the FindOne method.
	FindOneFunc func(q *PollOptionQuery) (*PollOption, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(record *PollOption) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// Count holds details about calls to the Count method.
		Count []struct {
			// Q is the q argument value.
			Q *PollOptionQuery
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Record is the record argument value.
			Record *PollOption
		}
		// FindAll holds details about calls to the FindAll method.
		FindAll []struct {
			// Q is the q argument value.
			Q *PollOptionQuery
		}
		// FindOne holds details about calls to the FindOne method.
		FindOne []struct {
			// Q is the q argument value.
			Q *PollOptionQuery
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Record is the record argument value.
			Record *PollOption
		}
	}
}

// Count calls CountFunc.
func (mock *IPollOptionStoreMock) Count(q *PollOptionQuery) (int64, error) {
	if mock.CountFunc == nil {
		panic("IPollOptionStoreMock.CountFunc: method is nil but IPollOptionStore.Count was just called")
	}
	callInfo := struct {
		Q *PollOptionQuery
	}{
		Q: q,
	}
	lockIPollOptionStoreMockCount.Lock()
	mock.calls.Count = append(mock.calls.Count, callInfo)
	lockIPollOptionStoreMockCount.Unlock()
	return mock.CountFunc(q)
}

// CountCalls gets all the calls that were made to Count.
// Check the length with:
//     len(mockedIPollOptionStore.CountCalls())
func (mock *IPollOptionStoreMock) CountCalls() []struct {
	Q *PollOptionQuery
} {
	var calls []struct {
		Q *PollOptionQuery
	}
	lockIPollOptionStoreMockCount.RLock()
	calls = mock.calls.Count
	lockIPollOptionStoreMockCount.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *IPollOptionStoreMock) Delete(record *PollOption) error {
	if mock.DeleteFunc == nil {
		panic("IPollOptionStoreMock.DeleteFunc: method is nil but IPollOptionStore.Delete was just called")
	}
	callInfo := struct {
		Record *PollOption
	}{
		Record: record,
	}
	lockIPollOptionStoreMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockIPollOptionStoreMockDelete.Unlock()
	return mock.DeleteFunc(record)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedIPollOptionStore.DeleteCalls())
func (mock *IPollOptionStoreMock) DeleteCalls() []struct {
	Record *PollOption
} {
	var calls []struct {
		Record *PollOption
	}
	lockIPollOptionStoreMockDelete.RLock()
	calls = mock.calls.Delete
	lockIPollOptionStoreMockDelete.RUnlock()
	return calls
}

// FindAll calls FindAllFunc.
func (mock *IPollOptionStoreMock) FindAll(q *PollOptionQuery) ([]*PollOption, error) {
	if mock.FindAllFunc == nil {
		panic("IPollOptionStoreMock.FindAllFunc: method is nil but IPollOptionStore.FindAll was just called")
	}
	callInfo := struct {
		Q *PollOptionQuery
	}{
		Q: q,
	}
	lockIPollOptionStoreMockFindAll.Lock()
	mock.calls.FindAll = append(mock.calls.FindAll, callInfo)
	lockIPollOptionStoreMockFindAll.Unlock()
	return mock.FindAllFunc(q)
}

// FindAllCalls gets all the calls that were made to FindAll.
// Check the length with:
//     len(mockedIPollOptionStore.FindAllCalls())
func (mock *IPollOptionStoreMock) FindAllCalls() []struct {
	Q *PollOptionQuery
} {
	var calls []struct {
		Q *PollOptionQuery
	}
	lockIPollOptionStoreMockFindAll.RLock()
	calls = mock.calls.FindAll
	lockIPollOptionStoreMockFindAll.RUnlock()
	return calls
}

// FindOne calls FindOneFunc.
func (mock *IPollOptionStoreMock) FindOne(q *PollOptionQuery) (*PollOption, error) {
	if mock.FindOneFunc == nil {
		panic("IPollOptionStoreMock.FindOneFunc: method is nil but IPollOptionStore.FindOne was just called")
	}
	callInfo := struct {
		Q *PollOptionQuery
	}{
		Q: q,
	}
	lockIPollOptionStoreMockFindOne.Lock()
	mock.calls.FindOne = append(mock.calls.FindOne, callInfo)
	lockIPollOptionStoreMockFindOne.Unlock()
	return mock.FindOneFunc(q)
}

// FindOneCalls gets all the calls that were made to FindOne.
// Check the length with:
//     len(mockedIPollOptionStore.FindOneCalls())
func (mock *IPollOptionStoreMock) FindOneCalls() []struct {
	Q *PollOptionQuery
} {
	var calls []struct {
		Q *PollOptionQuery
	}
	lockIPollOptionStoreMockFindOne.RLock()
	calls = mock.calls.FindOne
	lockIPollOptionStoreMockFindOne.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *IPollOptionStoreMock) Save(record *PollOption) (bool, error) {
	if mock.SaveFunc == nil {
		panic("IPollOptionStoreMock.SaveFunc: method is nil but IPollOptionStore.Save was just called")
	}
	callInfo := struct {
		Record *PollOption
	}{
		Record: record,
	}
	lockIPollOptionStoreMockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	lockIPollOptionStoreMockSave.Unlock()
	return mock.SaveFunc(record)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedIPollOptionStore.SaveCalls())
func (mock *IPollOptionStoreMock) SaveCalls() []struct {
	Record *PollOption
} {
	var calls []struct {
		Record *PollOption
	}
	lockIPollOptionStoreMockSave.RLock()
	calls = mock.calls.Save
	lockIPollOptionStoreMockSave.RUnlock()
	return calls
}
