// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package app

import (
	"sync"
)

var (
	lockIPollStoreMockFindOne sync.RWMutex
	lockIPollStoreMockSave    sync.RWMutex
)

// IPollStoreMock is a mock implementation of IPollStore.
//
//     func TestSomethingThatUsesIPollStore(t *testing.T) {
//
//         // make and configure a mocked IPollStore
//         mockedIPollStore := &IPollStoreMock{
//             FindOneFunc: func(q *PollQuery) (*Poll, error) {
// 	               panic("mock out the FindOne method")
//             },
//             SaveFunc: func(record *Poll) (bool, error) {
// 	               panic("mock out the Save method")
//             },
//         }
//
//         // use mockedIPollStore in code that requires IPollStore
//         // and then make assertions.
//
//     }
type IPollStoreMock struct {
	// FindOneFunc mocks the FindOne method.
	FindOneFunc func(q *PollQuery) (*Poll, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(record *Poll) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// FindOne holds details about calls to the FindOne method.
		FindOne []struct {
			// Q is the q argument value.
			Q *PollQuery
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Record is the record argument value.
			Record *Poll
		}
	}
}

// FindOne calls FindOneFunc.
func (mock *IPollStoreMock) FindOne(q *PollQuery) (*Poll, error) {
	if mock.FindOneFunc == nil {
		panic("IPollStoreMock.FindOneFunc: method is nil but IPollStore.FindOne was just called")
	}
	callInfo := struct {
		Q *PollQuery
	}{
		Q: q,
	}
	lockIPollStoreMockFindOne.Lock()
	mock.calls.FindOne = append(mock.calls.FindOne, callInfo)
	lockIPollStoreMockFindOne.Unlock()
	return mock.FindOneFunc(q)
}

// FindOneCalls gets all the calls that were made to FindOne.
// Check the length with:
//     len(mockedIPollStore.FindOneCalls())
func (mock *IPollStoreMock) FindOneCalls() []struct {
	Q *PollQuery
} {
	var calls []struct {
		Q *PollQuery
	}
	lockIPollStoreMockFindOne.RLock()
	calls = mock.calls.FindOne
	lockIPollStoreMockFindOne.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *IPollStoreMock) Save(record *Poll) (bool, error) {
	if mock.SaveFunc == nil {
		panic("IPollStoreMock.SaveFunc: method is nil but IPollStore.Save was just called")
	}
	callInfo := struct {
		Record *Poll
	}{
		Record: record,
	}
	lockIPollStoreMockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	lockIPollStoreMockSave.Unlock()
	return mock.SaveFunc(record)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedIPollStore.SaveCalls())
func (mock *IPollStoreMock) SaveCalls() []struct {
	Record *Poll
} {
	var calls []struct {
		Record *Poll
	}
	lockIPollStoreMockSave.RLock()
	calls = mock.calls.Save
	lockIPollStoreMockSave.RUnlock()
	return calls
}
